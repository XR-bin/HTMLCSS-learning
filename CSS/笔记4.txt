1. 弹性布局flex

    随着移动互联网的发展，对于网页布局来说要求越来越高，
    而传统的布局方案对于实现特殊布局非常不方便，比如垂直居中。
    2009年，W3C 提出了一种新的方案----Flex 布局，可以简便、
    完整、响应式地实现各种页面布局。目前，它已经得到了所有浏
    览器的支持，这意味着，现在就能很安全地使用这项功能。


    作用在flex容器上            作用在flex子项上
      flex-direction                order
       flex-wrap                  flex-grow
       flex-flow                  flex-shrink
     justify-content              flex-basis
       align-items                   flex
      align-content               align-self


    /********** 父元素上的相关flex **********/
    1) flex-direction
        用来控制子项整体布局方向，是从左往右还是从右
    往左，是从上往下还是从下往上。

    取值：
        row(默认值)  ： 显示行。方向为当前文档水平流方向，默认情况下是从左向右。
        row-reverse ： 显示为行，文档流方向是从右向左。
        column ： 显示为列，文档流方向是从上到下
        column-reverse ： 显示为列。文档流方向是从下到上。


    2) flex-wrap
        flex-wrap用来控制子项整体单行显示还是换行显示

    取值：
        nowrap(默认值) ： 表示单行显示，不换行
        wrap ：宽度不够就换行显示
        wrap-reverse ：本应该换行到下面的子项，现在跑到上一行


    3) flex-flow
            flex-flow属性是flex-direction和flex-wrap的缩写，
        表示flex布局的flow流动特性。第一个值表示方向，第二个值
        表示换行，中间用空格隔开。


    4) justify-content
        justify-content属性决定了主轴方向上子项的对齐和分布方式

    取值：
        flex-start(默认值)  ： 表现为请起始位置对齐           
        flex-end ： 表现为结束位置对齐
        center ： 表现为居中对齐
        space-between ： 表现为两端对齐。多余的空白间距只在元素中间区域分配
        space-around ： 每个flex子项两侧都环绕互不干扰的等宽的空白间距，最终视觉上边缘两侧的空白只有中间空白宽度一半
        space-evenly ： 每个flex子项两侧空白间距完全相等


    5) align-items
            align-items中的items指的就是flex子项们，因此align-items指
        的就是flex子项们相对于flex容器在侧轴方向上的对齐方式。  

    取值：
        stretch(默认) ：flex子项拉伸
        flex-start ：表现为容器顶部对齐
        flex-end ：表现为容器底部对齐
        center ： 表现为垂直居中对齐


    6) align-content
            align-content可以看成和justify-content是相似且对立的属
        性，如果所有flex子项只有一行，则align-content属性是没有任何效果的。

    取值：
        stretch ：每一行flex子元素都等比例拉伸，例如，如果共两行flex子元素，则每行拉伸高度是50%
        flex-start : 表现为起始位置对齐
        flex-end : 表现为结束位置对齐
        center ： 表现为居中对齐
        space-between ： 表现为两端对齐
        space-around ： 每一行元素上下都享有独立不重叠的空白空间
        space-evenl ： 每行元素都完全上下等分


    /********** 子元素上的相关flex **********/
    1) 各属性的作用
        order ： 可以通过设置order改变某个flex子项的排序位置。默认值是0
        flex-grow ：扩展flex子项所占据的宽度，扩展所侵占的空间就是除去元素外的剩余的空白间隙。默认值为0
        flex-shrink ： flex-shrink主要是处理当flex容器空间不足的时候，单个元素的收缩比例，默认值是1.
        flex-basis ： flex-basis定义了在分配剩余空间之前元素的默认大小。
        flex ： flex属性是flex-grow、flex-shrink的缩写
        align-self ： 控制单独某个flex子项的垂直对齐方式

        【注意】flex-grow 和 flex-basis 不能同时设置



2. 网格布局grid

    Grid布局是一个二维的布局方法，纵横两个方向总是同时存在。

    作用在grid容器上             作用在grid子项上
    grid-template-columns       grid-column-start
    grid-template-rows          grid-column-end
    grid-template-area          grid-row-start
    grid-template               grid-row-end
    grid-column-gap             grid-column
    grid-row-gap                grid-row
    grid-gap                    grid-area
    justify-items               justify-self
    align-items                 align-self
    place-items                 place-self
    justify-content
    align-content
    place-content


    1) grid-template-columns和grid-template-rows

            对网格进行横纵划分，形成二维布局。单位可以是像
        素，百分比，自适应以及fr单位（网格剩余空间比例单位）。

            有时候，我们网格的划分是很规律的，如果需要添加多个
        横纵网格时，可以利用repeat()语法进行简化操作。

        fr是比例分配.
        例如grid-template-columns: 1fr 2fr
        表示第一列宽度占1/3 第二列占2/3

        repeat()作用是批量操作
            例如 repeat(3,1fr) 等价于 1fr 1fr 1fr

    
    2) grid-template-areas和grid-template

            grid-template-areas就是给我们的网格划分区域的。
        此时grid子项只要使用grid-area属性指定其隶属于那个区。
        
        grid-template是grid-template-rows，grid-template-columns和grid-template-areas属性的缩写。



